cluster_coverage <- effect[1]
num_comm <- effect[2]
beta <- effect[3]
direct_NPIE <- effect[4]
comm_size <- effect[5]
background_effect <- effect[6]
# Input .csv file of final statuses ------------------------------------------
filename <- paste0(input_folder, cluster_coverage, "_", num_comm, "_", beta, "_", direct_NPIE, "_", comm_size, "_", background_effect, ".csv")
df <- read.csv(filename, header=F, stringsAsFactors=FALSE)
true_log_ratio_statistics <- vector()
log_ratio_statistics <- vector()
# For each simulation --------------------------------------------------------
for (sim in 1:nrow(df)) {
# Create dataframe of treatment, size, outcome -----------------------------
cluster_ls <- list()
for (cluster_num in 1:(ncol(df) - 1)) {
split_vec <- strsplit(df[sim, cluster_num], "_")[[1]]
to_add <- data.frame(matrix(NA, ncol=3, nrow=1))
to_add[1,1] <- as.numeric(split_vec[2])
to_add[1,2] <- as.numeric(split_vec[3])
to_add[1,3] <- as.numeric(split_vec[5])
cluster_ls[[cluster_num]] <- to_add
}
cluster_df <- do.call(rbind, cluster_ls)
colnames(cluster_df) <- c("treated", "size", "infected")
# Calculate *true* log ratio statistic -------------------------------------
true_num_infect_treatment <- sum(cluster_df$infected[which(cluster_df$treated == 1)])
true_num_infect_control <- sum(cluster_df$infected[which(cluster_df$treated == 0)])
true_log_ratio_statistic <- log((true_num_infect_treatment + 1) / (true_num_infect_control + 1))
true_log_ratio_statistics <- c(true_log_ratio_statistics, true_log_ratio_statistic)
# Mix up the cluster labels ten times --------------------------------------
for (permutation_dex in 1:10) {
# Randomly permute -------------------------------------------------------
assignment_init <- c(rep(1, num_comm / 2), rep(0, num_comm / 2))
cluster_df$treated <- permute(assignment_init)
# Calculate log ratio statistic ------------------------------------------
num_infect_treatment <- sum(cluster_df$infected[which(cluster_df$treated == 1)])
num_infect_control <- sum(cluster_df$infected[which(cluster_df$treated == 0)])
log_ratio_statistic <- log((num_infect_treatment + 1) / (num_infect_control + 1))
log_ratio_statistics <- c(log_ratio_statistics, log_ratio_statistic)
}
}
# Plot results ---------------------------------------------------------------
pdf(file=paste0(output_folder, cluster_coverage, "_", num_comm, "_", beta, "_", direct_NPIE, "_", comm_size, "_", background_effect, ".pdf"),width=10, height=5)
par(mfrow=c(1,2))
hist(true_log_ratio_statistics)
hist(log_ratio_statistics)
dev.off()
# Write .csvs of the data ----------------------------------------------------
filename <- file.path(paste0(output_folder, cluster_coverage, "_", num_comm, "_", beta, "_", direct_NPIE, "_", comm_size, "_", background_effect, ".csv"))
write.table(log_ratio_statistics, filename, row.names = F)
}
d<-1:13
sum((1-exp(-b*d))*dpois(d,8))
sum((1-exp(-0.048*d))*dpois(d,8))
sum((1-exp(-0.0448*d))*dpois(d,8))
d<-d<-1:1000
sum((1-exp(-0.0448*d))*dpois(d,8))
d<-1:16
sum((1-exp(-0.0448*d))*dpois(d,8))
d<-1:16
sum((1-exp(-0.0448*d))*dpois(d,8))
1- sum((1-exp(-0.0448*d))*dpois(d,8))
(1-exp(-0.0448*d))*dpois(d,8)
1-sum(exp(-b*d)*dpois(d,8))
b <- 0.0448
1-sum(exp(-b*d)*dpois(d,8))
1-sum((1 - exp(-b*d))*dpois(d,8))
1-(1 - exp(-b*d))
1-(1 - exp(-b*8))
1-sum(exp(-b*d)*dpois(d,8))
1-exp(-b*8)
1-sum(exp(-b*d)*dpois(d,8))
sum(1-exp(-b*d)*dpois(d,8))
1-exp(-b*d)*dpois(d,8))
1-exp(-b*d)*dpois(d,8)
1-sum(exp(-b*d)*dpois(d,8))
#rm(list=ls())
## Based on
## https://cmmid.github.io/topics/covid19/current-patterns-transmission/global-time-varying-transmission.html
## further adapted from
## https://github.com/aperaltasantos/covid_pt && https://cran.r-project.org/web/packages/EpiEstim/vignettes/demo.html
## Methods as described above
## Time-varying effective reproduction estimates were made with a 7-day sliding window using EpiEstim
## assuming an uncertain serial interval  with a mean of 4.7 days (95% CrI: 3.7, 6.0)
## and a standard deviation of 2.9 days (95% CrI: 1.9, 4.9).
### R_e calculation - Parametric SI method for
require(EpiEstim)
require(dplyr)
require(ggplot2)
require(RCurl)
require(reshape2)
require(purrr)
require(lubridate)
theme_set(theme_classic(base_size = 16))
data <- read.csv(text=getURL("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"),skip=1) #read from github
names(data) <- c('time','county','state','fips','cases','deaths')
data <- data[which(data$state == "Pennsylvania"),]
data %>%
group_by(state,county) %>%
summarize() -> test
data %>%
#subset(state == 'Missouri') %>%
mutate(county = as.character(county))  -> data
data$time <- as.Date(as.character(data$time),format='%Y-%m-%d')
data %>%
mutate(Date = time) %>%
select(time,county,state,cases,deaths,Date) %>%
subset(state == 'New York') %>%
subset(county == 'New York City') -> dat
dat %>%
select(time,cases,deaths) %>%
melt(id.vars = 'time') %>%
ggplot(aes(time,value,color=variable))+geom_line(size=2)+
facet_wrap(~variable,nrow=2,scales='free')
## which data source do you want to use?
## confirmed = deaths or cases
dat %>%
mutate(Confirmed = cases) %>%
select(Date,Confirmed) -> covid_pt
covid_pt<-covid_pt  %>%
#subset(Date >= '2020-03-05') %>%
mutate(epiweek = epiweek(Date))
first.date <- head(covid_pt$Date,1)
covid_pt %>%
mutate(
Confirmed_lag = lag(x = Confirmed,
n = 1,
order_by = Date),
Confirmed_var=Confirmed-Confirmed_lag,
Confirmed_sign=if_else(Confirmed_var>=0,"+","-")
) %>%
subset(Date >  first.date) -> covid_pt
covid_pt  %>%
select(
Date,Confirmed_var
)  %>%
dplyr::mutate(
t_start = dplyr::row_number() %>% as.numeric(),
t_end = t_start + 6
) -> covid_r
## set negative daily counts to zero
covid_r$Confirmed_var[ covid_r$Confirmed_var < 0 ] <- 0
## parametric estimate given 'known' SI (no CIs)
res_parametric_si <-
estimate_R(
covid_r$Confirmed_var,
method ="parametric_si",
config = make_config(
list(
mean_si = 4.7,
std_si = 2.9
)
)
)
plot(res_parametric_si, legend = FALSE)
r_prt <- as.data.frame(res_parametric_si$R)
### join by t-end
left_join(
x = covid_r,
y = dplyr::select(
r_prt,
c("t_end", "Mean(R)", "Quantile.0.025(R)", "Quantile.0.975(R)")
),
by = c("t_start" = "t_end")
) -> r_prt
r_prt %>%
dplyr::rename(
reff = "Mean(R)",
r_low = "Quantile.0.025(R)",
r_high = "Quantile.0.975(R)"
) -> r_prt
r_prt %>%
ggplot(aes(Date,reff)) +
geom_line()+
geom_hline( yintercept=1) +
geom_ribbon(aes(Date, ymin = r_low, ymax = r_high),alpha=0.3) +
scale_x_date(breaks='7 days') +
theme(axis.text.x = element_text(angle = 45, hjust = 1) )+
ggtitle("COVID-19 Effective reproduction")+
ylab(bquote(R[e]))+xlab(NULL)
## R_e calculation - allowing for uncertainity in SI
## use mean 4.7 (95% CrI: 3.7, 6.0)
## use sd 2.9 (95% CrI: 1.9, 4.9)
sens_configs <-
make_config(
list(
mean_si = 4.7, std_mean_si = 0.7,
min_mean_si = 3.7, max_mean_si = 6.0,
std_si = 2.9, std_std_si = 0.5,
min_std_si = 1.9, max_std_si = 4.9,
n1 = 1000,
n2 = 100,
seed = 123456789
)
)
Rt_nonparam_si <-
estimate_R(
covid_r$Confirmed_var,
method = "uncertain_si",
config = sens_configs
)
## inspect R_e estimate
#plot(Rt_nonparam_si, legend = FALSE)
## Posterior sample R_e estimate
sample_windows <- seq(length(Rt_nonparam_si$R$t_start))
#sample_windows <- Rt_nonparam_si$dates
posterior_R_t <-
map(
.x = sample_windows,
.f = function(x) {
posterior_sample_obj <-
sample_posterior_R(
R = Rt_nonparam_si,
n = 1000,
window = x
)
posterior_sample_estim <-
data.frame(
window_index = x,
window_t_start = Rt_nonparam_si$R$t_start[x],
window_t_end = Rt_nonparam_si$R$t_end[x],
date_point = covid_r[covid_r$t_start == Rt_nonparam_si$R$t_end[x], "Date"],
Confirmed = covid_pt[covid_r$t_start == Rt_nonparam_si$R$t_end[x], "Confirmed"],
R_e_median = median(posterior_sample_obj),
R_e_q0025 = quantile(posterior_sample_obj, probs = 0.025,na.rm = T),
R_e_q0975 = quantile(posterior_sample_obj, probs = 0.975,na.rm = T)
)
return(posterior_sample_estim)
}
) %>%
reduce(bind_rows)
posterior_R_t
posterior_R_t %>%
ggplot(aes(x = date_point, y = R_e_median)) +
geom_line(alpha = 0.3, size = 1.2) +
geom_ribbon(aes(ymin = R_e_q0025, ymax = R_e_q0975), alpha = 0.1) +
scale_x_date(breaks='7 days') +
theme(axis.text.x = element_text(angle = 45, hjust = 1) )+
geom_hline(yintercept = 1)+
ggtitle("COVID-19 Effective reproduction")+
ylab(bquote(R[e]))+xlab(NULL)
View(data)
#rm(list=ls())
## Based on
## https://cmmid.github.io/topics/covid19/current-patterns-transmission/global-time-varying-transmission.html
## further adapted from
## https://github.com/aperaltasantos/covid_pt && https://cran.r-project.org/web/packages/EpiEstim/vignettes/demo.html
## Methods as described above
## Time-varying effective reproduction estimates were made with a 7-day sliding window using EpiEstim
## assuming an uncertain serial interval  with a mean of 4.7 days (95% CrI: 3.7, 6.0)
## and a standard deviation of 2.9 days (95% CrI: 1.9, 4.9).
### R_e calculation - Parametric SI method for
require(EpiEstim)
require(dplyr)
require(ggplot2)
require(RCurl)
require(reshape2)
require(purrr)
require(lubridate)
theme_set(theme_classic(base_size = 16))
data <- read.csv(text=getURL("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"),skip=1) #read from github
names(data) <- c('time','county','state','fips','cases','deaths')
data <- data[which(data$state == "Pennsylvania"),]
data %>%
group_by(state,county) %>%
summarize() -> test
data %>%
#subset(state == 'Missouri') %>%
mutate(county = as.character(county))  -> data
data$time <- as.Date(as.character(data$time),format='%Y-%m-%d')
data %>%
mutate(Date = time) %>%
select(time,county,state,cases,deaths,Date) %>%
subset(state == 'New York') %>%
subset(county == 'New York City') -> dat
dat %>%
select(time,cases,deaths) %>%
melt(id.vars = 'time') %>%
ggplot(aes(time,value,color=variable))+geom_line(size=2)+
facet_wrap(~variable,nrow=2,scales='free')
## which data source do you want to use?
## confirmed = deaths or cases
dat %>%
mutate(Confirmed = cases) %>%
select(Date,Confirmed) -> covid_pt
covid_pt<-covid_pt  %>%
#subset(Date >= '2020-03-05') %>%
mutate(epiweek = epiweek(Date))
first.date <- head(covid_pt$Date,1)
covid_pt %>%
mutate(
Confirmed_lag = lag(x = Confirmed,
n = 1,
order_by = Date),
Confirmed_var=Confirmed-Confirmed_lag,
Confirmed_sign=if_else(Confirmed_var>=0,"+","-")
) %>%
subset(Date >  first.date) -> covid_pt
covid_pt  %>%
select(
Date,Confirmed_var
)  %>%
dplyr::mutate(
t_start = dplyr::row_number() %>% as.numeric(),
t_end = t_start + 6
) -> covid_r
## set negative daily counts to zero
covid_r$Confirmed_var[ covid_r$Confirmed_var < 0 ] <- 0
## parametric estimate given 'known' SI (no CIs)
res_parametric_si <-
estimate_R(
covid_r$Confirmed_var,
method ="parametric_si",
config = make_config(
list(
mean_si = 4.7,
std_si = 2.9
)
)
)
plot(res_parametric_si, legend = FALSE)
r_prt <- as.data.frame(res_parametric_si$R)
### join by t-end
left_join(
x = covid_r,
y = dplyr::select(
r_prt,
c("t_end", "Mean(R)", "Quantile.0.025(R)", "Quantile.0.975(R)")
),
by = c("t_start" = "t_end")
) -> r_prt
r_prt %>%
dplyr::rename(
reff = "Mean(R)",
r_low = "Quantile.0.025(R)",
r_high = "Quantile.0.975(R)"
) -> r_prt
r_prt %>%
ggplot(aes(Date,reff)) +
geom_line()+
geom_hline( yintercept=1) +
geom_ribbon(aes(Date, ymin = r_low, ymax = r_high),alpha=0.3) +
scale_x_date(breaks='7 days') +
theme(axis.text.x = element_text(angle = 45, hjust = 1) )+
ggtitle("COVID-19 Effective reproduction")+
ylab(bquote(R[e]))+xlab(NULL)
## R_e calculation - allowing for uncertainity in SI
## use mean 4.7 (95% CrI: 3.7, 6.0)
## use sd 2.9 (95% CrI: 1.9, 4.9)
sens_configs <-
make_config(
list(
mean_si = 4.7, std_mean_si = 0.7,
min_mean_si = 3.7, max_mean_si = 6.0,
std_si = 2.9, std_std_si = 0.5,
min_std_si = 1.9, max_std_si = 4.9,
n1 = 1000,
n2 = 100,
seed = 123456789
)
)
Rt_nonparam_si <-
estimate_R(
covid_r$Confirmed_var,
method = "uncertain_si",
config = sens_configs
)
## inspect R_e estimate
#plot(Rt_nonparam_si, legend = FALSE)
## Posterior sample R_e estimate
sample_windows <- seq(length(Rt_nonparam_si$R$t_start))
#sample_windows <- Rt_nonparam_si$dates
posterior_R_t <-
map(
.x = sample_windows,
.f = function(x) {
posterior_sample_obj <-
sample_posterior_R(
R = Rt_nonparam_si,
n = 1000,
window = x
)
posterior_sample_estim <-
data.frame(
window_index = x,
window_t_start = Rt_nonparam_si$R$t_start[x],
window_t_end = Rt_nonparam_si$R$t_end[x],
date_point = covid_r[covid_r$t_start == Rt_nonparam_si$R$t_end[x], "Date"],
Confirmed = covid_pt[covid_r$t_start == Rt_nonparam_si$R$t_end[x], "Confirmed"],
R_e_median = median(posterior_sample_obj),
R_e_q0025 = quantile(posterior_sample_obj, probs = 0.025,na.rm = T),
R_e_q0975 = quantile(posterior_sample_obj, probs = 0.975,na.rm = T)
)
return(posterior_sample_estim)
}
) %>%
reduce(bind_rows)
posterior_R_t
posterior_R_t %>%
ggplot(aes(x = date_point, y = R_e_median)) +
geom_line(alpha = 0.3, size = 1.2) +
geom_ribbon(aes(ymin = R_e_q0025, ymax = R_e_q0975), alpha = 0.1) +
scale_x_date(breaks='7 days') +
theme(axis.text.x = element_text(angle = 45, hjust = 1) )+
geom_hline(yintercept = 1)+
ggtitle("COVID-19 Effective reproduction")+
ylab(bquote(R[e]))+xlab(NULL)
View(data)
plot(1:136, data$cases[which(data$county == Luzerne)])
plot(1:136, data$cases[which(data$county == "Luzerne")])
dev.off()
plot(1:136, data$cases[which(data$county == "Luzerne")])
plot.new()
plot(1:136, data$cases[which(data$county == "Luzerne")])
plot(1:136, data$cases[which(data$county == "Luzerne")])
test <- data$cases[which(data$county == "Luzerne")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$county == "Luzerne")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$county == "Columbia")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$county == "Mercer")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$state == "Pennsylvania")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$state == "Pennsylvania")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$state == "Pennsylvania")]
test <- test[2:136] - test[1:135]
test <- data$cases[which(data$state == "Pennsylvania")]
plot(1:135, test)
plot(1:136, test)
test <- data$cases[which(data$state == "Pennsylvania")]
test <- test[2:8623] - test[1:8622]
plot(1:8622, test)
test <- data$cases[which(data$state == "Pennsylvania")]
test <- sum(data$cases[which(data$state == "Pennsylvania")])
test <- data$cases[which(data$county == "Mercer")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$county == "Luzerne")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$county == "Columbia")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
test <- data$cases[which(data$county == "Lackawanna")]
test <- test[2:136] - test[1:135]
plot(1:135, test)
plot(1:135, test, main="Lackawanna")
names(data) <- c('time','county','state','fips','cases','deaths')
data <- data[which(data$state == "Pennsylvania"),]
test <- data$cases[which(data$county == "Mercer")]
test <- test[2:136] - test[1:135]
plot(1:135, test, main="Mercer")
test <- data$cases[which(data$county == "Luzerne")]
test <- test[2:136] - test[1:135]
plot(1:135, test, main="Luzerne")
test <- data$cases[which(data$county == "Lackawanna")]
test <- test[2:136] - test[1:135]
plot(1:135, test, main="Lackawanna")
test <- data$cases[which(data$county == "Columbia")]
test <- test[2:136] - test[1:135]
plot(1:135, test, main="Columbia")
plot(1:135, luzerne, main="Luzerne")
mercer <- data$cases[which(data$county == "Mercer")]
mercer <- mercer[2:136] - mercer[1:135]
plot(1:135, mercer, main="Mercer")
luzerne <- data$cases[which(data$county == "Luzerne")]
luzerne <- luzerne[2:136] - luzerne[1:135]
plot(1:135, luzerne, main="Luzerne")
lackawanna <- data$cases[which(data$county == "Lackawanna")]
lackawanna <- lackawanna[2:136] - lackawanna[1:135]
plot(1:135, lackawanna, main="Lackawanna")
columbia <- data$cases[which(data$county == "Columbia")]
columbia <- columbia[2:136] - columbia[1:135]
plot(1:135, columbia, main="Columbia")
plot(1:135, luzerne, main="Luzerne")
points(1:135, mercer, main="Mercer")
points(1:135, lackawanna, main="Lackawanna")
points(1:135, columbia, main="Columbia")
plot(1:135, luzerne, main="Luzerne", lty="line")
plot(1:135, luzerne, main="Luzerne", type="line")
lines(1:135, mercer, main="Mercer", col="red")
lines(1:135, lackawanna, main="Lackawanna", col="blue")
lines(1:135, columbia, main="Columbia", col="green")
shiny::runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
library)shiny
setwd("~/SW-CRT-outbreak/NPI_study/EoN/power_shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
